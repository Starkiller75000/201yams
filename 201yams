#!/usr/bin/env python3.5

import sys
from math import *


def usage():
    print("USAGE")
    print("\t./201yams d1 d2 d3 d4 d5 c\n")
    print("DESCRIPTION")
    print("\td1\tvalue of the first die (0 if not thrown)")
    print("\td2\tvalue of the second die (0 if not thrown)")
    print("\td3\tvalue of the third die (0 if not thrown)")
    print("\td4\tvalue of the fourth die (0 if not thrown)")
    print("\td5\tvalue of the fifth die (0 if not thrown)")
    print("\tc\texpected combination")
    sys.exit(0)


def error_arguments():
    sys.stderr.write("The program must be launch by precising 5 dices and 1 combination\n")
    sys.stderr.write("If dices haven't been thrown u must set them to 0\n")
    sys.stderr.write("Number of arguments invalid.\n")
    sys.exit(84)


def combin(n, k):
    if k > n // 2:
        k = n - k
    x = 1
    y = 1
    i = n - k + 1
    while i <= n:
        x = (x * i) // y
        y += 1
        i += 1
    return x


def loi_binomiale(n, k):
    x = combin(n, k) * pow(1 / 5, k) * pow(5 / 6, n - k)
    return x


def calc_probability(c, nb):
    res = 0
    nb_occurence = dices.count(int(nb))
    if nb_occurence >= c:
        res = 1
    else:
        for x in range(c - nb_occurence, 5 - nb_occurence + 1):
            res += loi_binomiale(5 - nb_occurence, x)
    return res


def print_result(value, name, res):
    print("chances to get a " + value + " " + name + ": %.2f" % float(res * 100) + "%")


def yams(value, name, res):
    print_result(value, name, res)


def four(value, name, res):
    print_result(value, name + "-of-a-kind", res)


def three(value, name, res):
    print_result(value, name + "-of-a-kind", res)


def pair(value, name, res):
    print_result(value, name, res)


def init_function():
    if combination[0] == "yams":
        yams(combination[1], combination[0], calc_probability(5, combination[1]))
    elif combination[0] == "straight":
        print("straight")
    elif combination[0] == "full":
        print("full")
    elif combination[0] == "four":
        four(combination[1], combination[0], calc_probability(4, combination[1]))
    elif combination[0] == "three":
        three(combination[1], combination[0], calc_probability(3, combination[1]))
    elif combination[0] == "pair":
        pair(combination[1], combination[0], calc_probability(2, combination[1]))


if __name__ == '__main__':
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        usage()
    if len(sys.argv) != 7:
        error_arguments()
    i = 1
    cnt = 0
    while i < len(sys.argv) - 1:
        if sys.argv[i] == "0":
            cnt += 1
        i += 1
    if cnt > 0 and cnt != 5:
        sys.stderr.write("If dices haven't been thrown u must set them to 0\n")
        sys.stderr.write("Invalid initialisation of dices.\n")
        sys.exit(84)
    dices = list()
    try:
        j = 1
        while j < len(sys.argv) - 1:
            dices.append(int(sys.argv[j]))
            j += 1
        i = 0
        while i < len(dices):
            if dices[i] < 0 or dices[i] > 6:
                sys.exit()
            i += 1
    except:
        sys.stderr.write("Arguments must be a number set between 0 and 6.\n")
        i = 0
        while i < len(dices):
            if dices[i] < 0 or dices[i] > 6:
                sys.stderr.write("Arguments must be superior to 0 or equal to 6.\n")
                sys.exit(84)
            i += 1
        sys.exit(84)
    combination = []
    combination = sys.argv[6].split("_")
    try:
        dice_c = int(combination[1])
        if dice_c < 0 or dice_c > 6:
            sys.exit(84)
        if combination[0] == "yams" or combination[0] == "four" or combination[0] == "straight" or \
                combination[0] == "full" or combination[0] == "three" or combination[0] == "pair":
            init_function()
    except:
        sys.stderr.write("Argument 6 write : NameofCombination_number with a number superior to 0 or equal to 6.\n")
        sys.exit(84)
